/* tslint:disable */
/* eslint-disable */
/**
 * Tapir By LingXi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChangePasswordCommand
 */
export interface ChangePasswordCommand {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordCommand
     */
    oldPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordCommand
     */
    newPassword: string;
}
/**
 * 
 * @export
 * @interface CreateRoleCommand
 */
export interface CreateRoleCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateRoleCommand
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoleCommand
     */
    name: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateRoleCommand
     */
    permission?: Array<number>;
}
/**
 * 
 * @export
 * @interface CreateUserCommand
 */
export interface CreateUserCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    nickName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    email: string;
    /**
     * 
     * @type {number}
     * @memberof CreateUserCommand
     */
    role: number;
}
/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * 
     * @type {number}
     * @memberof ErrorMessage
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    message: string;
}
/**
 * 
 * @export
 * @interface LoginCommand
 */
export interface LoginCommand {
    /**
     * 
     * @type {string}
     * @memberof LoginCommand
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginCommand
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof LoginCommand
     */
    code: string;
}
/**
 * 
 * @export
 * @interface PageRoleDto
 */
export interface PageRoleDto {
    /**
     * 
     * @type {number}
     * @memberof PageRoleDto
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PageRoleDto
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof PageRoleDto
     */
    totalCount: number;
    /**
     * 
     * @type {Array<RoleDto>}
     * @memberof PageRoleDto
     */
    data?: Array<RoleDto>;
    /**
     * 
     * @type {number}
     * @memberof PageRoleDto
     */
    totalPages: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageRoleDto
     */
    hasPrevious: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageRoleDto
     */
    hasNext: boolean;
}
/**
 * 
 * @export
 * @interface PageUserDto
 */
export interface PageUserDto {
    /**
     * 
     * @type {number}
     * @memberof PageUserDto
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PageUserDto
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof PageUserDto
     */
    totalCount: number;
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof PageUserDto
     */
    data?: Array<UserDto>;
    /**
     * 
     * @type {number}
     * @memberof PageUserDto
     */
    totalPages: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageUserDto
     */
    hasPrevious: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageUserDto
     */
    hasNext: boolean;
}
/**
 * 
 * @export
 * @interface PermissionDto
 */
export interface PermissionDto {
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    createBy: number;
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    updateBy: number;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    updateAt: string;
}
/**
 * 
 * @export
 * @interface RoleDto
 */
export interface RoleDto {
    /**
     * 
     * @type {number}
     * @memberof RoleDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    name: string;
    /**
     * 
     * @type {Array<PermissionDto>}
     * @memberof RoleDto
     */
    permissions?: Array<PermissionDto>;
    /**
     * 
     * @type {number}
     * @memberof RoleDto
     */
    createBy: number;
    /**
     * 
     * @type {number}
     * @memberof RoleDto
     */
    updateBy: number;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    updateAt: string;
}
/**
 * 
 * @export
 * @interface UpdateRoleCommand
 */
export interface UpdateRoleCommand {
    /**
     * 
     * @type {number}
     * @memberof UpdateRoleCommand
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleCommand
     */
    name: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateRoleCommand
     */
    permissions?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof UpdateRoleCommand
     */
    updateBy?: number;
}
/**
 * 
 * @export
 * @interface UpdateUserCommand
 */
export interface UpdateUserCommand {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserCommand
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    nickName: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    phone?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserCommand
     */
    role: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserCommand
     */
    updateBy: number;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    nickName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    email: string;
    /**
     * 
     * @type {RoleDto}
     * @memberof UserDto
     */
    role?: RoleDto;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    createBy: number;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    updateBy: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    updateAt: string;
}

/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 上传文件接口
         * @summary 上传文件
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUpload: async (file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling fileUpload.');
            }
            const localVarPath = `/files/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 上传文件接口
         * @summary 上传文件
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUpload(file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await FilesApiAxiosParamCreator(configuration).fileUpload(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 上传文件接口
         * @summary 上传文件
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUpload(file: any, options?: any): AxiosPromise<string> {
            return FilesApiFp(configuration).fileUpload(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 上传文件接口
     * @summary 上传文件
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public fileUpload(file: any, options?: any) {
        return FilesApiFp(this.configuration).fileUpload(file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 创建自定义角色
         * @summary 创建角色
         * @param {CreateRoleCommand} createRoleCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (createRoleCommand: CreateRoleCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleCommand' is not null or undefined
            if (createRoleCommand === null || createRoleCommand === undefined) {
                throw new RequiredError('createRoleCommand','Required parameter createRoleCommand was null or undefined when calling createRole.');
            }
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createRoleCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(createRoleCommand !== undefined ? createRoleCommand : {})
                : (createRoleCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除角色，超级管理员角色不允许删除
         * @summary 删除角色
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRole.');
            }
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取权限列表
         * @summary 获取权限列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermission: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 分页的方式获取角色列表，支持排序
         * @summary 分页获取角色
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleByPage: async (page?: number, size?: number, sort?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新角色信息，可以同时保存角色所分配的权限
         * @summary 更新角色
         * @param {UpdateRoleCommand} updateRoleCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (updateRoleCommand: UpdateRoleCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRoleCommand' is not null or undefined
            if (updateRoleCommand === null || updateRoleCommand === undefined) {
                throw new RequiredError('updateRoleCommand','Required parameter updateRoleCommand was null or undefined when calling updateRole.');
            }
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof updateRoleCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(updateRoleCommand !== undefined ? updateRoleCommand : {})
                : (updateRoleCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 创建自定义角色
         * @summary 创建角色
         * @param {CreateRoleCommand} createRoleCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(createRoleCommand: CreateRoleCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).createRole(createRoleCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 删除角色，超级管理员角色不允许删除
         * @summary 删除角色
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).deleteRole(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取权限列表
         * @summary 获取权限列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPermission(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionDto>>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).listPermission(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 分页的方式获取角色列表，支持排序
         * @summary 分页获取角色
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoleByPage(page?: number, size?: number, sort?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageRoleDto>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).listRoleByPage(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 更新角色信息，可以同时保存角色所分配的权限
         * @summary 更新角色
         * @param {UpdateRoleCommand} updateRoleCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(updateRoleCommand: UpdateRoleCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await RolesApiAxiosParamCreator(configuration).updateRole(updateRoleCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 创建自定义角色
         * @summary 创建角色
         * @param {CreateRoleCommand} createRoleCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(createRoleCommand: CreateRoleCommand, options?: any): AxiosPromise<number> {
            return RolesApiFp(configuration).createRole(createRoleCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除角色，超级管理员角色不允许删除
         * @summary 删除角色
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(id: number, options?: any): AxiosPromise<void> {
            return RolesApiFp(configuration).deleteRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取权限列表
         * @summary 获取权限列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermission(options?: any): AxiosPromise<Array<PermissionDto>> {
            return RolesApiFp(configuration).listPermission(options).then((request) => request(axios, basePath));
        },
        /**
         * 分页的方式获取角色列表，支持排序
         * @summary 分页获取角色
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleByPage(page?: number, size?: number, sort?: string, options?: any): AxiosPromise<PageRoleDto> {
            return RolesApiFp(configuration).listRoleByPage(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新角色信息，可以同时保存角色所分配的权限
         * @summary 更新角色
         * @param {UpdateRoleCommand} updateRoleCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(updateRoleCommand: UpdateRoleCommand, options?: any): AxiosPromise<void> {
            return RolesApiFp(configuration).updateRole(updateRoleCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * 创建自定义角色
     * @summary 创建角色
     * @param {CreateRoleCommand} createRoleCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public createRole(createRoleCommand: CreateRoleCommand, options?: any) {
        return RolesApiFp(this.configuration).createRole(createRoleCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除角色，超级管理员角色不允许删除
     * @summary 删除角色
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public deleteRole(id: number, options?: any) {
        return RolesApiFp(this.configuration).deleteRole(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取权限列表
     * @summary 获取权限列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public listPermission(options?: any) {
        return RolesApiFp(this.configuration).listPermission(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 分页的方式获取角色列表，支持排序
     * @summary 分页获取角色
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public listRoleByPage(page?: number, size?: number, sort?: string, options?: any) {
        return RolesApiFp(this.configuration).listRoleByPage(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新角色信息，可以同时保存角色所分配的权限
     * @summary 更新角色
     * @param {UpdateRoleCommand} updateRoleCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public updateRole(updateRoleCommand: UpdateRoleCommand, options?: any) {
        return RolesApiFp(this.configuration).updateRole(updateRoleCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 当前登陆用户修改密码
         * @summary 修改密码
         * @param {ChangePasswordCommand} changePasswordCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPwd: async (changePasswordCommand: ChangePasswordCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordCommand' is not null or undefined
            if (changePasswordCommand === null || changePasswordCommand === undefined) {
                throw new RequiredError('changePasswordCommand','Required parameter changePasswordCommand was null or undefined when calling changeUserPwd.');
            }
            const localVarPath = `/users/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof changePasswordCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(changePasswordCommand !== undefined ? changePasswordCommand : {})
                : (changePasswordCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 给用户分配角色
         * @summary 修改用户的角色
         * @param {number} userId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserRole: async (userId: number, roleId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling changeUserRole.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling changeUserRole.');
            }
            const localVarPath = `/users/{userId}/roles/{roleId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建用户
         * @summary 创建用户
         * @param {CreateUserCommand} createUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserCommand: CreateUserCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserCommand' is not null or undefined
            if (createUserCommand === null || createUserCommand === undefined) {
                throw new RequiredError('createUserCommand','Required parameter createUserCommand was null or undefined when calling createUser.');
            }
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createUserCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(createUserCommand !== undefined ? createUserCommand : {})
                : (createUserCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前用户信息，包括基本信息/权限/角色等，但是不包括密码
         * @summary 当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据id 删除用户
         * @summary 删除用户
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 分页的方式获取用户列表，支持排序
         * @summary 分页获取用户
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserByPage: async (page?: number, size?: number, sort?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 输入用户名和密码，登陆管理后台
         * @summary 用户登陆
         * @param {LoginCommand} loginCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginCommand: LoginCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginCommand' is not null or undefined
            if (loginCommand === null || loginCommand === undefined) {
                throw new RequiredError('loginCommand','Required parameter loginCommand was null or undefined when calling login.');
            }
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof loginCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(loginCommand !== undefined ? loginCommand : {})
                : (loginCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 登陆时获取验证码
         * @summary 登陆验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginCode: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 用户退出登陆
         * @summary 退出登陆
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新用户基本信息
         * @summary 更新用户信息
         * @param {UpdateUserCommand} updateUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (updateUserCommand: UpdateUserCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserCommand' is not null or undefined
            if (updateUserCommand === null || updateUserCommand === undefined) {
                throw new RequiredError('updateUserCommand','Required parameter updateUserCommand was null or undefined when calling updateUser.');
            }
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof updateUserCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(updateUserCommand !== undefined ? updateUserCommand : {})
                : (updateUserCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 当前登陆用户修改密码
         * @summary 修改密码
         * @param {ChangePasswordCommand} changePasswordCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeUserPwd(changePasswordCommand: ChangePasswordCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).changeUserPwd(changePasswordCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 给用户分配角色
         * @summary 修改用户的角色
         * @param {number} userId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeUserRole(userId: number, roleId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).changeUserRole(userId, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 创建用户
         * @summary 创建用户
         * @param {CreateUserCommand} createUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserCommand: CreateUserCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).createUser(createUserCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取当前用户信息，包括基本信息/权限/角色等，但是不包括密码
         * @summary 当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).currentUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 根据id 删除用户
         * @summary 删除用户
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).deleteUser(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 分页的方式获取用户列表，支持排序
         * @summary 分页获取用户
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserByPage(page?: number, size?: number, sort?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageUserDto>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).listUserByPage(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 输入用户名和密码，登陆管理后台
         * @summary 用户登陆
         * @param {LoginCommand} loginCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginCommand: LoginCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).login(loginCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 登陆时获取验证码
         * @summary 登陆验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).loginCode(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 用户退出登陆
         * @summary 退出登陆
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).logout(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 更新用户基本信息
         * @summary 更新用户信息
         * @param {UpdateUserCommand} updateUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(updateUserCommand: UpdateUserCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).updateUser(updateUserCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 当前登陆用户修改密码
         * @summary 修改密码
         * @param {ChangePasswordCommand} changePasswordCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPwd(changePasswordCommand: ChangePasswordCommand, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).changeUserPwd(changePasswordCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 给用户分配角色
         * @summary 修改用户的角色
         * @param {number} userId 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserRole(userId: number, roleId: number, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).changeUserRole(userId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建用户
         * @summary 创建用户
         * @param {CreateUserCommand} createUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserCommand: CreateUserCommand, options?: any): AxiosPromise<number> {
            return UsersApiFp(configuration).createUser(createUserCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前用户信息，包括基本信息/权限/角色等，但是不包括密码
         * @summary 当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser(options?: any): AxiosPromise<UserDto> {
            return UsersApiFp(configuration).currentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 根据id 删除用户
         * @summary 删除用户
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 分页的方式获取用户列表，支持排序
         * @summary 分页获取用户
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserByPage(page?: number, size?: number, sort?: string, options?: any): AxiosPromise<PageUserDto> {
            return UsersApiFp(configuration).listUserByPage(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 输入用户名和密码，登陆管理后台
         * @summary 用户登陆
         * @param {LoginCommand} loginCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginCommand: LoginCommand, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).login(loginCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 登陆时获取验证码
         * @summary 登陆验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginCode(options?: any): AxiosPromise<string> {
            return UsersApiFp(configuration).loginCode(options).then((request) => request(axios, basePath));
        },
        /**
         * 用户退出登陆
         * @summary 退出登陆
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 更新用户基本信息
         * @summary 更新用户信息
         * @param {UpdateUserCommand} updateUserCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateUserCommand: UpdateUserCommand, options?: any): AxiosPromise<void> {
            return UsersApiFp(configuration).updateUser(updateUserCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 当前登陆用户修改密码
     * @summary 修改密码
     * @param {ChangePasswordCommand} changePasswordCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public changeUserPwd(changePasswordCommand: ChangePasswordCommand, options?: any) {
        return UsersApiFp(this.configuration).changeUserPwd(changePasswordCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 给用户分配角色
     * @summary 修改用户的角色
     * @param {number} userId 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public changeUserRole(userId: number, roleId: number, options?: any) {
        return UsersApiFp(this.configuration).changeUserRole(userId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建用户
     * @summary 创建用户
     * @param {CreateUserCommand} createUserCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(createUserCommand: CreateUserCommand, options?: any) {
        return UsersApiFp(this.configuration).createUser(createUserCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前用户信息，包括基本信息/权限/角色等，但是不包括密码
     * @summary 当前用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUser(options?: any) {
        return UsersApiFp(this.configuration).currentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据id 删除用户
     * @summary 删除用户
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(id: number, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 分页的方式获取用户列表，支持排序
     * @summary 分页获取用户
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserByPage(page?: number, size?: number, sort?: string, options?: any) {
        return UsersApiFp(this.configuration).listUserByPage(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 输入用户名和密码，登陆管理后台
     * @summary 用户登陆
     * @param {LoginCommand} loginCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public login(loginCommand: LoginCommand, options?: any) {
        return UsersApiFp(this.configuration).login(loginCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 登陆时获取验证码
     * @summary 登陆验证码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public loginCode(options?: any) {
        return UsersApiFp(this.configuration).loginCode(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用户退出登陆
     * @summary 退出登陆
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public logout(options?: any) {
        return UsersApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新用户基本信息
     * @summary 更新用户信息
     * @param {UpdateUserCommand} updateUserCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(updateUserCommand: UpdateUserCommand, options?: any) {
        return UsersApiFp(this.configuration).updateUser(updateUserCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


